{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SeeFiltered","TodoList","todosFromServer","selectUser","selectedUserId","useState","filter","setFilter","selectFilter","setSelectFilter","filteredByTitle","todo","completed","active","all","title","includes","className","type","value","onChange","event","target","map","classNames","checked","readOnly","userId","onClick","id","API_URL","CurrentUser","setSelectedUserId","user","setUser","useEffect","fetch","then","response","json","result","catch","error","console","log","name","email","phone","App","setTodosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0dfe23b5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  todosFromServer: Todo[];\n  selectUser: React.Dispatch<React.SetStateAction<number>>;\n  selectedUserId: number;\n}\n\nenum SeeFiltered {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todosFromServer, selectUser, selectedUserId,\n}) => {\n  const [filter, setFilter] = useState('');\n  const [selectFilter, setSelectFilter] = useState('all');\n\n  const filteredByState\n    = todosFromServer.filter(todo => {\n      if (todo.completed === true && selectFilter === SeeFiltered.completed) {\n        return true;\n      }\n\n      if (todo.completed === false && selectFilter === SeeFiltered.active) {\n        return true;\n      }\n\n      if (selectFilter === SeeFiltered.all) {\n        return true;\n      }\n\n      return false;\n    });\n\n  const filteredByTitle\n    = filteredByState.filter(todo => todo.title.includes(filter));\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        className=\"input\"\n        type=\"text\"\n        data-cy=\"filterByTitle\"\n        value={filter}\n        onChange={event => {\n          setFilter(event.target.value);\n        }}\n      />\n\n      <div className=\"select\">\n        <select\n          value={selectFilter}\n          onChange={event => {\n            setSelectFilter(event.target.value);\n          }}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames('TodoList__item', {\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={`TodoList__user-button button ${selectedUserId === todo.userId && 'TodoList__user-button--selected'}`}\n                data-cy=\"userButton\"\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ninterface Props {\n  selectedUserId: number;\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId, setSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User | null>();\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then(result => setUser(result))\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.log(error, 'something wrong with syntax');\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <button\n        className=\"\n              TodoList__user-button\n              TodoList__user-button--red\n              button\n            \"\n        type=\"button\"\n        onClick={() => {\n          setSelectedUserId(0);\n        }}\n      >\n        clear\n      </button>\n\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${selectedUserId}`}</span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {user?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    getAllTodos()\n      .then(result => setTodosFromServer(result))\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.log(error, 'something wrong here');\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todosFromServer={todosFromServer}\n          selectUser={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}